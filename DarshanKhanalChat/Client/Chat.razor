@page "/chathub"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @onclick="AddMessage" @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" enabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages){
        <li style="list-style-type: none; font-weight: bold; border: solid black 3px; color: black; background-color: #F5F4F2; width: 60%; text-align: center;">@message</li>

 
}
    
</ul>
 
@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string userInput;
    private string messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
           
            StateHasChanged();
        }); 
                 

        await hubConnection.StartAsync();
    }

    async Task Send() =>
        await hubConnection.SendAsync("SendMessage", userInput, messageInput);
      
        

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;


async Task AddMessage()
{ 
      await hubConnection.SendAsync("SendMessageToGroup", userInput, "Is typing...");

}
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}